#pragma once
#ifndef CPUF_DEVINFO_CPP

#if !defined(__GNUC__) && !defined(_MSC_VER)
#   error("The cdevinfo header support only clang, gcc and partially msvc")
#endif
#ifndef __cplusplus
#   pragma message("Header for C++ included in C project. Redirecting to C compatible version: devinfo.h")
#   include "./devinfo.h"
#else
#include <type_traits>
// simpficies #if blocks
// #define def(x) defined(x)

namespace devinfo {
    constexpr const char* unknown = "unknown";
    constexpr int undefined_id = -1;

    constexpr double                    // avx versions
                avx = 1,
                avx2 = 2,
                avx512F = 512,
                avx512BW = 512.1,
                avx512VL = 512.2,
                avx512CD = 512.3,
                avx512MASK = 512.4,
                avx512VBMI = 512.5,
                avx512VBM2 = 512.6;

    constexpr double                    // arch versions
                i386 = 386,
                i486 = 486,
                i586 = 586,
                i686 = 686,
                amd64 = 64,
                armv2 = 2,
                armv3 = 3,
                armv4 = 4,
                armv5 = 5,
                armv6 = 6,
                armv7 = 7,
                armv8 = 8,
                aarch64 = armv8,

                armv4T = 4.1,
                armv5T = 5.1,
                armv5E = 5.2,
                armv5TE = 5.3,
                armv5TEJ = 5.4,
                armv6J = 6.1,
                armv6K = 6.2,
                armv6Z = 6.3,
                armv6ZK = 6.4,
                armv6T2 = 6.5,
                armv7A = 7.1,
                armv7R = 7.2,
                armv7M = 7.3,
                armv7EM = 7.4,
                armv8A = 8.1,
                armv8_1A = 8.2,
                armv8_2A = 8.3,
                armv8_3A = 8.4,
                armv8_4A = 8.5,
                armv8_5A = 8.6,
                armv8_6A = 8.7;

    constexpr double                    // arch kinds
                arm = .1, 
                x86 = .2,
                powerpc = .3,
                mips = .4,
                sparc = .5,
                riscv = .6;

    constexpr int                       // compiler kinds
                clang_id = 1, 
                gnu_id = 2, 
                msvc_id = 3;

    constexpr int                       // os kinds
                apple = 1, 
                linux = 2, 
                windows = 3;

    constexpr int                       // lang kinds
                Cpp = 1,
                C = 0;
    # if defined(__x86_64__) || defined(__amd64__)  || defined(_M_X64) || defined(_M_AMD64)
        // the devinfo.h library do not provide a functionality to define version of amd64 architecture
        // so in case we have amd64 architecture we define it here and skip architecture definition section
        // for skipping use __DEFINED_ARCHITECTURE__ macro 
        
        constexpr double ARCH = amd64;
        constexpr const char* ARCH_STR = "amd64";
        constexpr double ARCH_BYTESIZE = 8;
        #if defined(__GNUC__)
            static const int& __cpuf_devinfo_amd64_ver__() {    // 3if
                if      (__builtin_cpu_supports("x86-64-v4"))   return 4;
                else if (__builtin_cpu_supports("x86-64-v3"))   return 3;
                else if (__builtin_cpu_supports("x86-64-v2"))   return 2;
                                                                return 1;
            }
            /**
             * @brief Define the version number of AMD64 architecture in runtime
             *        Possible values: 1, 2, 3, 4
             *        Note: This is GNU only feature and cannot work elsewhere.
            */
            const int AMD64_VER = __cpuf_devinfo_amd64_ver__();
            /**
             * @brief The string representation of AMD64_VER
             * Possible values: "x86-64-v1", "x86-64-v2", "x86-64-v3", "x86-64-v4"
             * Note: it is assigned unknown on non-gnu compiler
            */
            const char* AMD64_VER_STR = AMD64_VER == 3 ? "x86-64-v3" : AMD64_VER == 2 ? "x86-64-v2" : AMD64_VER == 4 ? "x86-64-v4" : "x86-64-v1"; // 3 if
        #else
            /**
             * @brief Define the version number of AMD64 architecture in runtime
             *        Possible values: 1, 2, 3, 4
             *        Note: This is GNU only feature and cannot work elsewhere. 
             *        The current compiler does not support this feature 
            */
            constexpr int AMD64_VER = 1;
            /**
             * @brief The string representation of AMD64_VER
             * Possible values: "x86-64-v1", "x86-64-v2", "x86-64-v3", "x86-64-v4"
             * Note: it is assigned unknown on non-gnu compiler
            */
            constexpr const char* AMD64_VER_STR = unknown;
        #endif
        #define __DEFINED_ARCHITECTURE__ 
    #endif

#ifdef CPUF_DEVINFO_C
    // since the devinfo.h is included we can use those macros


    constexpr int 
# ifdef DEVINFO_CPP
        /** @brief The current language id. C = 0, C++ = 1 */
        LANG = 1,
# else
        /* The current language id. C = 0, C++ = 1 */
        LANG = 0,
# endif
        COMPILER = DEVINFO_COMPILER,
        ARCH_BITSIZE = DEVINFO_ARCH_BITSIZE,
        OS = DEVINFO_OS,
        OS_BYTESIZE = DEVINFO_OS_BYTESIZE,
        OS_BITSIZE = DEVINFO_OS_BITSIZE,
        AVX = DEVINFO_AVX_VER,
        SSE = DEVINFO_SSE_VER;
    constexpr const char* LANG_STR = DEVINFO_LANG_STR;
    constexpr const char* COMPILER_STR = DEVINFO_COMPILER_STR;
    constexpr const char* OS_STR = DEVINFO_OS_STR;
    #ifndef __DEFINED_ARCHITECTURE__
        constexpr const char* ARCH_STR = DEVINFO_ARCH_STR;
        constexpr double 
                        ARCH = DEVINFO_ARCH,
                        ARCH_KIND = DEVINFO_ARCH_KIND;
        constexpr int 
                        ARCH_BYTESIZE = DEVINFO_ARCH_BYTESIZE,
    #endif
#else
    #ifdef __cplusplus
        constexpr const char* LANG_STR = "C++";
        constexpr int LANG = 1;
    #else
        constexpr const char* LANG_STR = "C";
        constexpr int LANG = 0;
    #endif

    # if defined (__clang__)
        /**
         * @brief the id of compiler
         * There are constants clang, gnu and msvc defines these values
         * possible values: clang_id (1), gnu_id(2), msvc_id (3)
        */
        constexpr int COMPILER = clang_id;
        /**
         * @brief the compiler in string representaiton
         * possible values: "clang", "gnu", "msvc"
        */
        constexpr const char* COMPILER_STR = "clang";
    # elif defined(__GNUC__)
        /**
         * @brief the id of compiler
         * There are constants clang, gnu and msvc defines these values
         * possible values: clang_id (1), gnu_id(2), msvc_id (3)
        */
        constexpr int COMPILER = gnu_id;
        /**
         * @brief the compiler in string representaiton
         * possible values: "clang", "gnu", "msvc"
        */
        constexpr const char* COMPILER_STR = "gnu";
    # else
        /**
         * @brief the id of compiler
         * There are constants clang, gnu and msvc defines these values
         *sibl pose values: clang_id (1), gnu_id(2), msvc_id (3)
        */
        constexpr int COMPILER = msvc_id;
        /**
         * @brief the compiler in string representaiton
         * possible values: "clang", "gnu", "msvc"
        */
        constexpr const char* COMPILER_STR = "msvc";
    # endif
    /* #####    ARCHITECTURE DEFINIONS  ##### */
    #ifndef __DEFINED_ARCHITECTURE__ 
    # if defined(__i386__) || defined(__x86__) || defined(_M_IX86)
        /**
         * @brief the index of device architecture.
         * The index is determined by the architecture index. For example i386 has index 386, i686 has index 686 and so on
         * For arm the index is main version of architecture and the decimal part is responsible for each subversion in sequence. For example:
         * armv5 (5), armv5T (5.1), armv5E (5.2), armv5TE (5.3) and so on.
         * amd64 has index 64.
         * There are constants for non obvious cases. Example: 
         * if (devinfo::ARCH >= devinfo::armv7A && devinfo::ARCH <= armv8) // for arm devices within armv7 architecture
         * 
        */
        constexpr double ARCH = I386;
        /**
         * @brief the architecture of device in string representation.
         * Possible values: i386, i486, i586, i686, 
         * armv2, armv3, armv4, armv4T, armv5, armv5T, armv5TE, armv5TEJ, armv6, armv6J, armv6K, armv6Z, armv6ZK, armv6T2
         * armv7, armv7A, armv7R, armv7E, armv7EM, armv8, armv8A, armv8_1A, armv8_2A, armv8_3A, armv8_4A, armv8_5A, armv8_6A.
         * if not supported assigned to undefined_id (-1)
        */
        constexpr const char* ARCH_STR = "i386";
        /**
         * @brief This is the common kind of architecture you use. 
         * Possible values: arm (1), x86 (2), powerpc (3), mips (4), sparc (5), riscv  (6)
         * 
         */
        constexpr const double ARCH_KIND = x86;
        constexpr const char* ARCH_KIND_STR = "x86";
        constexpr double ARCH_BYTESIZE = 4;

    # elif defined(__i486__)

        constexpr double ARCH = I486;
        constexpr const char* ARCH_STR = "i486";
        constexpr const double ARCH_KIND = x86;
        constexpr const char* ARCH_KIND_STR = "x86";
        constexpr double ARCH_BYTESIZE = 4;

    # elif defined(__i586__)

        constexpr double ARCH = i586;
        constexpr const char* ARCH_STR = "i586";
        constexpr const double ARCH_KIND = x86;
        constexpr const char* ARCH_KIND_STR = "x86";
        constexpr double ARCH_BYTESIZE = 4;

    # elif defined(__i686__)

        constexpr double ARCH = i686;
        constexpr const char* ARCH_STR = "i686";
        constexpr const double ARCH_KIND = x86;
        constexpr const char* ARCH_KIND_STR = "x86";
        constexpr double ARCH_BYTESIZE = 4;
    # elif defined(__arm__)
        # if defined(__ARM_ARCH_2__)
            constexpr double ARCH = armv2;
            constexpr const char* ARCH_STR = "armv2";
            constexpr double ARCH_BYTESIZE = 4;
        # elif defined(__ARM_ARCH_3__) || defined(__ARM_ARCH_3M__)
            constexpr double ARCH = armv3;
            constexpr const char* ARCH_STR = "armv3";
            constexpr double ARCH_BYTESIZE = 4;
        # elif defined(__ARM_ARCH_4__)
            constexpr double ARCH = armv4;
            constexpr double ARCH_BYTESIZE = 4;
        # elif defined(__ARM_ARCH_4T__)
            constexpr double ARCH = armv4T;
            constexpr const char* ARCH_STR = "armv4T";
            constexpr double ARCH_BYTESIZE = 4;
        # elif defined(__ARM_ARCH_5__)
            constexpr double ARCH = armv5;
            constexpr const char* ARCH_STR = "armv5";
            constexpr double ARCH_BYTESIZE = 4;
        # elif defined(__ARM_ARCH_5T__)
            constexpr double ARCH = armv5T;
            constexpr const char* ARCH_STR = "armv5T";
            constexpr double ARCH_BYTESIZE = 4;
        # elif defined(__ARM_ARCH_5E__)
            constexpr double ARCH = armv5E;
            constexpr const char* ARCH_STR = "armv5E";
            constexpr double ARCH_BYTESIZE = 4;
        # elif defined(__ARM_ARCH_5TE__)
            constexpr double ARCH = armv5TE;
            constexpr const char* ARCH_STR = "armv5TE";
            constexpr double ARCH_BYTESIZE = 4;
        # elif defined(__ARM_ARCH_5TEJ__)
            constexpr double ARCH = armv5TEJ;
            constexpr const char* ARCH_STR = "armv5TEJ";
            constexpr double ARCH_BYTESIZE = 4;
        # elif defined(__ARM_ARCH_6__)
            constexpr double ARCH = armv6;
            constexpr const char* ARCH_STR = "armv6";
            constexpr double ARCH_BYTESIZE = 4;
        # elif defined(__ARM_ARCH_6J__)
            constexpr double ARCH = armv6J;
            constexpr const char* ARCH_STR = "armv6J";
            constexpr double ARCH_BYTESIZE = 4;
        # elif defined(__ARM_ARCH_6K__)
            constexpr double ARCH = armv6K;
            constexpr const char* ARCH_STR = "armv6K";
            constexpr double ARCH_BYTESIZE = 4;
        # elif defined(__ARM_ARCH_6Z__)
            constexpr double ARCH = armv6Z;
            constexpr const char* ARCH_STR = "armv6Z";
            constexpr double ARCH_BYTESIZE = 4;
        # elif defined(__ARM_ARCH_6ZK__)
            constexpr double ARCH = armv6ZK;
            constexpr const char* ARCH_STR = "armv6ZK";
            constexpr double ARCH_BYTESIZE = 4;
        # elif defined(__ARM_ARCH_6T2__)
            constexpr double ARCH = armv6T2;
            constexpr const char* ARCH_STR = "armv6T2";
            constexpr double ARCH_BYTESIZE = 4;
        # elif defined(__ARM_ARCH_7__)
            constexpr double ARCH = armv7;
            constexpr const char* ARCH_STR = "armv7";
            constexpr double ARCH_BYTESIZE = 4;
        # elif defined(__ARM_ARCH_7A__)
            constexpr double ARCH = armv7A;
            constexpr const char* ARCH_STR = "armv7A";
            constexpr double ARCH_BYTESIZE = 4;
        # elif defined(__ARM_ARCH_7R__)
            constexpr double ARCH = armv7R;
            constexpr const char* ARCH_STR = "armv7R";
            constexpr double ARCH_BYTESIZE = 4;
        # elif defined(__ARM_ARCH_7M__)
            constexpr double ARCH = armv7M;
            constexpr const char* ARCH_STR = "armv7M";
            constexpr double ARCH_BYTESIZE = 4;
        # elif defined(__ARM_ARCH_7EM__)
            constexpr double ARCH = armv7EM;
            constexpr const char* ARCH_STR = "armv7EM";
            constexpr double ARCH_BYTESIZE = 4;
        # elif defined(__ARM_ARCH_8__) || defined(__aarch64__)
            constexpr double ARCH = armv8;
            constexpr const char* ARCH_STR = "armv8";
            constexpr int BYTESIZE = 8;
        # elif defined(__ARM_ARCH_8A__)
            constexpr double ARCH = armv8A;
            constexpr const char* ARCH_STR = "armv8A";
            constexpr double ARCH_BYTESIZE = 8;
        # elif defined(__ARM_ARCH_8_1__)
            constexpr double ARCH = armv8_1A;
            constexpr const char* ARCH_STR = "armv8.1A";
            constexpr double ARCH_BYTESIZE = 8;
        # elif defined(__ARM_ARCH_8_2__)
            constexpr double ARCH = armv8_2A;
            constexpr const char* ARCH_STR = "armv8.2A";
            constexpr double ARCH_BYTESIZE = 8;
        # elif defined(__ARM_ARCH_8_3__)
            constexpr double ARCH = armv8_3A;
            constexpr const char* ARCH_STR = "armv8.3A";
            constexpr double ARCH_BYTESIZE = 8;
        # elif defined(__ARM_ARCH_8_4__)
            constexpr double ARCH = armv8_4A;
            constexpr const char* ARCH_STR = "armv8.4A";
            constexpr double ARCH_BYTESIZE = 8;
        # elif defined(__ARM_ARCH_8_5__)
            constexpr double ARCH = armv8_5A;
            constexpr const char* ARCH_STR = "armv8.5A";
            constexpr double ARCH_BYTESIZE = 8;
        # elif defined(__ARM_ARCH_8_6__)
            constexpr double ARCH = armv8_6A;
            constexpr const char* ARCH_STR = "armv8.6A";
            constexpr double ARCH_BYTESIZE = 8;
        #else
        #   pragma message("We've defined the architecture is ARM but exact version is not defined")
            constexpr double ARCH = arm;
            constexpr const char* ARCH_STR = "arm";
            constexpr double ARCH_BYTESIZE = undefined_id;
        #define ___UNDEFINED_ARCHITECTURE___
        #endif
        constexpr double ARCH_KIND = arm;
        constexpr const char* ARCH_KIND_STR = "arm";
    # elif defined(__powerpc__) || defined(__PPC__)
        constexpr double ARCH = powerpc;
        constexpr const char* ARCH_STR = "powerpc";
        #if defined(__powerpc64__) || defined(__ppc64__)
            constexpr double ARCH_BYTESIZE = 8;
        #else
            constexpr double ARCH_BYTESIZE = 4;
        #endif
    # elif defined(__mips__) || defined(__mips)
        constexpr double ARCH = mips;
        constexpr double ARCH_KIND = mips;
        constexpr const char* ARCH_STR = "mips";
        #if defined(__mips64__) || defined(__mips64)
            constexpr double ARCH_BYTESIZE = 8;
        #else
            constexpr double ARCH_BYTESIZE = 4;
        #endif
    # elif defined(__sparc__)
        constexpr double ARCH = sparc;
        constexpr double ARCH_KIND = sparc;
        constexpr const char* ARCH_STR = "sparc";
        #if defined(__LP64__)
            constexpr double ARCH_BYTESIZE = 8;
        #else
            constexpr double ARCH_BYTESIZE = 4;
        #endif
    # elif defined(__riscv__)
        constexpr double ARCH = riscv;
        constexpr double ARCH_KIND = riscv;
        constexpr const char* ARCH_STR = "riscv";
        #if defined(__LP64__)
            constexpr double ARCH_BYTESIZE = 8;
        #else
            constexpr double ARCH_BYTESIZE = 4;
        #endif
    # else
    #   pragma message("Undefined architecture")

        constexpr double ARCH = undefined_id;
        constexpr const char* ARCH_STR = unknown;
        constexpr const double ARCH_KIND = undefined_id;
        constexpr const double ARCH_BYTESIZE = undefined_id;
    #   define ___UNDEFINED_ARCHITECTURE___

    # endif
    #else
    # undef __DEFINED_ARCHITECTURE__
    #endif // __DEFINED_ARCHITECTURE__ 
    # if defined(__SSE4_2__)
        /**
         * @brief the SSE version.
         * Possible values: 1 (SSE supported), 2 (SSE2), 3 (SSE3), 3.1 (SSSE3), 4.1 (SSE4.1), 4.2 (SSE4.2)
         * if not supported assigned to undefined_id (-1)
        */
        constexpr int SSE_VER = 4.2;
    # elif defined(__SSE4_1)
        constexpr int SSE_VER = 4.1;
    # elif defined(__SSSE3__)
        constexpr int SSE_VER = 3.1;
    # elif defined(__SSE3__)
        constexpr int SSE_VER = 3;
    # elif defined(__SSE2__)
        constexpr int SSE_VER = 2;
    # elif defined(__SSE2__)
        constexpr int SSE_VER = 2;
    # elif defined(__SSE__)
        constexpr int SSE_VER = 1;
    # else
        constexpr int SSE_VER = undefined_id;
    # endif
    # if defined(__AVX__)
        /**
         * @brief the AVX version.
         * Possible values: avx (1), avx2 (2) avx512F (512), avx512BW (512.1),  avx512VL (512.2) avx512CD (512.3), avx512MASK (512.4), avx512VBMI (512.5), avx512VBM2 (512.6).
         * if not supported assigned to undefined_id (-1)
        */
        constexpr int AVX_VER = avx;
    # elif defined(__AVX2__)
        constexpr int AVX_VER = avx2;
    # elif defined(__AVX512F__)
        constexpr int AVX_VER = avx512F;
    # elif defined(__AVX512BW__)
        constexpr int AVX_VER = avx512BW;
    # elif defined(__AVX512VL__)
        constexpr int AVX_VER = avx512VL;
    # elif defined(__AVX512CD__)
        constexpr int AVX_VER = avx512CD;
    # elif defined(__AVX512MASK__)
        constexpr int AVX_VER = avx512MASK;
    # elif defined(__AVX512VBMI__)
        constexpr int AVX_VER = avx512VBMI;
    # elif defined(__AVX512VBM2__)
        constexpr int AVX_VER = avx512VBM2;
    # else
        constexpr int AVX_VER = undefined_id;
    # endif

    # if defined(__APPLE__)
        constexpr int OS = apple;
        constexpr const char* OS_STR = "apple";
        #if defined(__LP64__) && __LP64__
            constexpr int OS_BYTESIZE = 8;
        #else
            constexpr int OS_BYTESIZE = 4;
        #endif
    # elif defined(__linux__)
        constexpr int OS = linux;
        constexpr const char* OS_STR = "linux";
        #if defined(__LP64__) || defined(_LP64)
            constexpr int OS_BYTESIZE = 8;
        #else
            constexpr int OS_BYTESIZE = 4;
        #endif
    # elif defined(__FreeBSD__)
        constexpr int OS = freebsd;
        constexpr const char* OS_STR = "freebsd";
        #if defined(__LP64__)
            constexpr int OS_BYTESIZE = 8;
        #else
            constexpr int OS_BYTESIZE = 4;
        #endif
    # elif defined(_WIN32)
        constexpr int OS = windows;
        constexpr const char* OS_STR = "windows";
        #if defined(_WIN64)
            constexpr int OS_BYTESIZE = 8;
        #else
            constexpr int OS_BYTESIZE = 4;
        #endif
    # else
    #   pragma message("Undefined platform. The platforms it able to determine are: Linux, FreeBSD, MacOS and Windows")
    #   define ___UNDEFINED_OS___
        constexpr int OS = undefined_id;
        constexpr char* OS_STR = "undefined";
    # endif

    # ifndef ___UNDEFINED_ARCHITECTURE___
        /**
         * @brief the highest amount of bits the architecture does support. Varying between 32 and 64 bits. Equals ARCH_BYTESIZE * 8
        */
        constexpr double ARCH_BITSIZE = ARCH_BYTESIZE * 8;
    # else
    #   undef ___UNDEFINED_ARCHITECTURE___
        /**
         * @brief the highest amount of bits architecture does support. Varying between 32 and 64 bits. Equals ARCH_BYTESIZE * 8
        */
        constexpr double ARCH_BITSIZE = undefined_id;
    # endif

    # ifndef ___UNDEFINED_OS___
        /**
         * @brief the highest amount of bits OS does support. Varying between 32 and 64 bits. Equals ARCH_BYTESIZE * 8
        */
        constexpr int OS_BITSIZE = OS_BYTESIZE * 8;
    # else
    #   undef ___UNDEFINED_ARCHITECTURE___
        /**
         * @brief the highest amount of bits OS does support. Varying between 32 and 64 bits. Equals ARCH_BYTESIZE * 8
        */
        constexpr int OS_BITSIZE = undefined_id;
    # endif

#endif // CPUF_DEVINFO_C
}

#endif // __cplusplus

#endif // CPUF_DEVINFO_CPP