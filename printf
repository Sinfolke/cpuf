#include <string>
#include <cstdarg>
#include <charconv>
#include <iostream>
#include <iomanip>
#include <functional>
#include <vector>
//#include <regex>
static const char* _ioconfig_laststart = NULL;
//std::vector<const char*> errbuf = {};
namespace ioconfig {
    // standard configurations
    const char
        *_char = "c|hhd",
        *_uchar = "hhu",
        *_short = "hd",
        *_ushort = "hu",
        *_int = "d|i",
        *_uint = "u",
        *_long = "ld|li",
        *_ulong = "lu",
        *_llong = "lld|lli",
        *_ullong = "llu|zu"
    ;
    const char 
        *_char_hex = "hhx",
        *_char_hex_big = "hhX",
        *_short_hex = "hx",
        *_short_hex_big = "hX",
        *_int_hex = "x",
        *_int_hex_big = "X",
        *_long_hex = "lx",
        *_long_hex_big = "lX",
        *_llong_hexx = "hhx",
        *_llong_hex_big = "hhX"
    ;
    const char* str = "s";
    // using event_handler = std::function<void(std::smatch&)>;
    // static std::unordered_map<std::string, event_handler> handlers {}; 
    // void add(std::string fmt, event_handler event) {
    //     if (fmt[0] != '^')
    //         fmt.insert(0, "^");
    //     handlers[fmt] = event;
    // }
    // void rm(std::string fmt) {
    //     if (fmt[0] != '^')
    //         fmt.insert(0, '^');
    //     handlers.erase(fmt);
    // }
    // evaluate the simple conditional configuration
    int eval_simple(const char* conf, const char* input) {
        if (conf[1] == '\0') {
            // handle single character
            return (conf[0] == input[0]);
        }
        int equal = 1;
        const char* p = conf;
        _ioconfig_laststart = p;
        for (; *p != '\0'; p++, input++) {
            if (*p == '|') {
                if (equal)
                    return p - _ioconfig_laststart;
                // reset
                equal = 1;
                _ioconfig_laststart = p + 1;
                continue;
            }
            if (*p != *input)
                equal = 0;
            
        }
        if (equal)
            return p - _ioconfig_laststart;
        return 0;
    }
    // std::tuple<int, std::smatch> eval_complex(std::string conf, const char* input) {
    //     try {
    //         static std::regex pattern(conf);  // Static to reuse the compiled pattern
    //         std::smatch result;
    //         if (std::regex_search(input, result, pattern))
    //             return std::make_tuple(1, result);
    //     } catch (const std::regex_error& e) {
    //         // Handle or log the error
    //         std::cerr << "<Regex error: " << e.what() << '>';
    //     }
    //     return std::make_tuple(0, std::smatch());
    // }
};
// Base case for the case when only one argument is left
static void print_nth(std::stringstream& buf, int index) {
    buf << "<none>";
}
template<typename T, typename ...Args>
static void print_nth(std::stringstream& buf, int index, T first, Args&&... args) {
    if (index == 0) {
        buf << first;
    } else {
        print_nth(buf, index - 1, args...);
    }
}

// General case for when there are more than one argument
template<typename Actual>
static void print_ntht(std::stringstream& buf, int index) {
    buf << "<none>";
}
// Primary template for variadic arguments
template<typename Actual, typename T, typename... Args>
static void print_ntht(std::stringstream& buf, int index, T first, Args... rest) {
    if (index == 0) {
        buf << reinterpret_cast<Actual&>(first);
    } else {
        print_ntht<Actual>(buf, index - 1, rest...);
    }
}
static long long convert_to_num(const char* start, char* end) {
    long long id = std::strtoll(start, &end, 10);
    #ifdef CPUF_NON_ZERO_COUNT
        id++;
    #endif
    return id;
}
template<typename... Args>
static int out_list(std::stringstream& buf, int id, const char* start, int iterator, int* printed, Args... args) {
    char* end;
    *printed = convert_to_num(start, end);

    for (int i = 0; i < *printed; i ++) {
        print_nth(buf, id + (i * iterator), args...);
    }

    return end - start;
}

template<typename... Args>
static int out_woffset(std::stringstream& buf, int id, const char* start, int sign, int* printed, Args... args) {
    char* end;
    *printed = convert_to_num(start, end);

    print_nth(buf, id + (*printed * sign), args...);

    return end - start;
}
// Macros to simplify the `cpuf_internal_print_fmt` implementation
#define TRY(var) if ((len = ioconfig::eval_simple(ioconfig::var, format)) != 0)
#define TRY_EVAL(var) else TRY(var)
#define printt(type) print_ntht<type>(buf, id, args...); (*printed)++
#define print print_nth(buf, id, args...); (*printed)++
#define PRINT_HEX(type) \
    buf << std::setw(sizeof(type)) << std::setfill('0') << std::hex; \
    printt(type); \
    (*printed)++
#define PRINT_HEX_UPPER(type) \
    buf << std::setw(sizeof(type)) << std::setfill('0') << std::hex << std::uppercase; \
    printt(type); \
    buf << std::nouppercase; \
    (*printed)++

/**
 * Internal function to handle format specifiers and print accordingly.
 * This version writes to a provided `std::stringstream`.
 */
template<typename... Args>
static int cpuf_internal_do_fmt(int id, const char* format, int* printed, std::stringstream& buf, Args&&... args) {
    int len = 0;
    // TRY blocks to evaluate format specifiers
    TRY(_char) {
        printt(char);
    }
    TRY_EVAL(_uchar) {
        printt(unsigned char);
    }
    TRY_EVAL(_short) {
        printt(short);
    }
    TRY_EVAL(_ushort) {
        printt(unsigned short);
    }
    TRY_EVAL(_int) {
        printt(int);
    }
    TRY_EVAL(_uint) {
        printt(unsigned int);
    }
    TRY_EVAL(_long) {
        printt(long);
    }
    TRY_EVAL(_ulong) {
        printt(unsigned long);
    }
    TRY_EVAL(_llong) {
        printt(long long);
    }
    TRY_EVAL(_ullong) {
        printt(unsigned long long);
    }

    // For hexadecimal types
    TRY_EVAL(_char_hex) {
        PRINT_HEX(char);
    }
    TRY_EVAL(_char_hex_big) {
        PRINT_HEX_UPPER(char);
    }
    TRY_EVAL(_short_hex) {
        PRINT_HEX(short);
    }
    TRY_EVAL(_short_hex_big) {
        PRINT_HEX_UPPER(short);
    }
    TRY_EVAL(_int_hex) {
        PRINT_HEX(int);
    }
    TRY_EVAL(_int_hex_big) {
        PRINT_HEX_UPPER(int);
    }
    TRY_EVAL(_long_hex) {
        PRINT_HEX(long);
    }
    TRY_EVAL(_long_hex_big) {
        PRINT_HEX_UPPER(long);
    }
    TRY_EVAL(_llong_hexx) {
        PRINT_HEX(long long);
    }
    TRY_EVAL(_llong_hex_big) {
        PRINT_HEX_UPPER(long long);
    }
    TRY_EVAL(str) {
        // string
        print;
    }
    else if (isdigit(*format)) {
        char* end;
        long long num = convert_to_num(format, end);
        print;
        len = static_cast<int>(end - format);
    }
    else if (*format == '$') {
        // Output any type
        len = 1;
        *printed = 1;
        print;
    }
    else if (*format == '+') {
        len = (*++format == '+') ?
            out_list(buf, id, format, 1, printed, args...) : out_woffset(buf, id, format, 1, printed, args...);
    }
    else if (*format == '-') {
        len = (*++format == '-') ?
            out_list(buf, id, format, -1, printed, args...) : out_woffset(buf, id, format, -1, printed, args...);
    }
    else {
        return 0; // Unrecognized format specifier
    }
    return len;
}

#undef TRY
#undef TRY_EVAL
#undef PRINT_HEX
#undef PRINT_HEX_UPPER
#undef printt
#undef print

/**
 * Internal function to handle format specifiers and print accordingly.
 * This version writes to `std::cout`.
 */
template<typename ...Args>
static int cpuf_internal_print_fmt(int id, const char* format, int* printed, Args&&... args) {
    int len = 0;
    // Reuse the existing `cpuf_internal_print_fmt` by passing `std::cout` as the stream
    // To maintain functionality, we call the `std::stringstream` version and then output it
    std::stringstream ss;
    len = cpuf_internal_print_do(id, format, printed, ss, args...);
    std::cout << ss.str();
    return len;
}
static int cpuf_internal_print_fmt_stderr(int id, const char* format, int* printed, Args&&... args) {
    int len = 0;
    // Reuse the existing `cpuf_internal_print_fmt` by passing `std::cout` as the stream
    // To maintain functionality, we call the `std::stringstream` version and then output it
    std::stringstream ss;
    len = cpuf_internal_print_do(id, format, printed, ss, args...);
    std::cout << ss.str();
    return len;
}
namespace cpuf {
/**
 * `cpuf_printf` writes the formatted output directly to `std::cout`.
 */
template<typename ...Args>
int printf(const char* format, Args&&... args) {
    int id = 0;
    const char* start = format;
    while (*format != '\0') {
        if (*format == '%') {
            format++;
            if (*format != '%') {
                int printed = 0;
                int len = cpuf_internal_print_fmt(id, format, &printed, args...);
                format += len;
                id += printed;
                continue;
            }
        }
        std::cout << *format++;
    }
    return static_cast<int>(format - start);
}

/**
 * Overloaded `cpuf_printf` that accepts a `std::string` as the format.
 */
template<typename ...Args>
int printf(const std::string& format, Args&&... args) {
    int id = 0;
    int i = 0;
    while (i < static_cast<int>(format.size())) {
        if (format[i] == '%') {
            i++;
            if (i < static_cast<int>(format.size()) && format[i] != '%') {
                int printed = 0;
                int len = cpuf_internal_print_fmt(id, format.c_str() + i, &printed, args...);
                i += len;
                id += printed;
                continue;
            }
        }
        std::cout << format[i++];
    }
    return i;
}
template<typename ...Args>
int perror(const std::string& format, Args&&... args) {
    int id = 0;
    int i = 0;
    while (i < static_cast<int>(format.size())) {
        if (format[i] == '%') {
            i++;
            if (i < static_cast<int>(format.size()) && format[i] != '%') {
                int printed = 0;
                int len = cpuf_internal_print_fmt_stderr(id, format.c_str() + i, &printed, args...);
                i += len;
                id += printed;
                continue;
            }
        }
        std::cout << format[i++];
    }
    return i;
}
/**
 * `cpuf_sprintf` formats the string and returns it as `std::string`.
 */
template<typename ...Args>
std::string sprintf(const char* format, Args&&... args) {
    int id = 0;
    const char* start = format;
    std::stringstream buf;
    while (*format != '\0') {
        if (*format == '%') {
            format++;
            if (*format != '%') {
                int printed = 0;
                int len = cpuf_internal_do_fmt(id, format, &printed, buf, args...);
                format += len;
                id += printed;
                continue;
            }
        }
        buf << *format++;
    }
    return buf.str();
}

/**
 * Overloaded `cpuf_sprintf` that accepts a `std::string` as the format.
 */
template<typename ...Args>
std::string sprintf(const std::string& format, Args&&... args) {
    int id = 0;
    int i = 0;
    std::stringstream buf;
    while (i < static_cast<int>(format.size())) {
        if (format[i] == '%') {
            i++;
            if (i < static_cast<int>(format.size()) && format[i] != '%') {
                int printed = 0;
                int len = cpuf_internal_do_fmt(id, format.c_str() + i, &printed, buf, args...);
                i += len;
                id += printed;
                continue;
            }
        }
        buf << format[i++];
    }
    return buf.str();
}


} // cpuf